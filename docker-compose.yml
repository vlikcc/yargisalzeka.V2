

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-yargisalzeka}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch (ElasticSearch alternative)
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Identity Service
  identityservice:
    build:
      context: .
      dockerfile: IdentityService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=IdentityDb;User Id=postgres;Password=${POSTGRES_PASSWORD:-postgres};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-http://api-gateway:5000}
      - Jwt__Audience=${JWT_AUDIENCE:-http://api-gateway:5000}
      - SubscriptionService__BaseUrl=${SubscriptionService__BaseUrl:-http://subscriptionservice:5002}
      - Database__EnsureCreated=${Database__EnsureCreated:-true}
      - Database__UseMigrations=${Database__UseMigrations:-true}
    ports:
      - "5030:5001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Subscription Service
  subscriptionservice:
    build:
      context: .
      dockerfile: SubscriptionService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5002
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=SubscriptionDb;User Id=postgres;Password=${POSTGRES_PASSWORD:-postgres};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-http://api-gateway:5000}
      - Jwt__Audience=${JWT_AUDIENCE:-http://api-gateway:5000}
    ports:
      - "5229:5002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AI Service
  aiservice:
    build:
      context: .
      dockerfile: AIService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5012
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=AIDb;User Id=postgres;Password=${POSTGRES_PASSWORD:-postgres};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-http://api-gateway:5000}
      - Jwt__Audience=${JWT_AUDIENCE:-http://api-gateway:5000}
      - SubscriptionService__BaseUrl=${SubscriptionService__BaseUrl:-http://subscriptionservice:5002}
      - Gemini__ApiKey=${GEMINI_API_KEY}
      - SearchService__BaseUrl=${SearchService__BaseUrl:-http://searchservice:5004}
      - HealthChecks__Enabled=${HealthChecks__Enabled:-true}
    ports:
      - "5012:5012"
    depends_on:
      - subscriptionservice
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5012/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Document Service
  documentservice:
    build:
      context: .
      dockerfile: DocumentService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5003
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=DocumentDb;User Id=postgres;Password=${POSTGRES_PASSWORD:-postgres};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-http://api-gateway:5000}
      - Jwt__Audience=${JWT_AUDIENCE:-http://api-gateway:5000}
      - SubscriptionService__BaseUrl=${SubscriptionService__BaseUrl:-http://subscriptionservice:5002}
      - Database__EnsureCreated=${Database__EnsureCreated:-true}
    ports:
      - "5144:5003"
    depends_on:
      postgres:
        condition: service_healthy
      subscriptionservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Search Service
  searchservice:
    build:
      context: .
      dockerfile: SearchService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5004
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=SearchDb;User Id=postgres;Password=${POSTGRES_PASSWORD:-postgres};
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-http://api-gateway:5000}
      - Jwt__Audience=${JWT_AUDIENCE:-http://api-gateway:5000}
      - SubscriptionService__BaseUrl=${SubscriptionService__BaseUrl:-http://subscriptionservice:5002}
      - OpenSearch__Uri=${OpenSearch__Uri:-http://opensearch:9200}
      - Search__Provider=${Search__Provider:-fulltext}
      - Database__EnsureCreated=${Database__EnsureCreated:-true}
    ports:
      - "5043:5004"
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      subscriptionservice:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5004/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway
  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5000
    ports:
      - "5161:5000"
    depends_on:
      - identityservice
      - subscriptionservice
      - aiservice
      - documentservice
      - searchservice
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Vite build served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - apigateway

volumes:
  postgres_data:
  opensearch_data:

networks:
  default:
    driver: bridge
